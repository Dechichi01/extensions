// Automatically generated by MockGen. DO NOT EDIT!
// Source: mongo/interfaces/collection.go

package mocks

import (
	gomock "github.com/golang/mock/gomock"
	mgo_v2 "gopkg.in/mgo.v2"
)

// Mock of Collection interface
type MockCollection struct {
	ctrl     *gomock.Controller
	recorder *_MockCollectionRecorder
}

// Recorder for MockCollection (not exported)
type _MockCollectionRecorder struct {
	mock *MockCollection
}

func NewMockCollection(ctrl *gomock.Controller) *MockCollection {
	mock := &MockCollection{ctrl: ctrl}
	mock.recorder = &_MockCollectionRecorder{mock}
	return mock
}

func (_m *MockCollection) EXPECT() *_MockCollectionRecorder {
	return _m.recorder
}

func (_m *MockCollection) Find(query interface{}) *mgo_v2.Query {
	ret := _m.ctrl.Call(_m, "Find", query)
	ret0, _ := ret[0].(*mgo_v2.Query)
	return ret0
}

func (_mr *_MockCollectionRecorder) Find(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Find", arg0)
}

func (_m *MockCollection) Insert(docs ...interface{}) error {
	_s := []interface{}{}
	for _, _x := range docs {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Insert", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCollectionRecorder) Insert(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Insert", arg0...)
}

func (_m *MockCollection) Pipe(pipeline interface{}) *mgo_v2.Pipe {
	ret := _m.ctrl.Call(_m, "Pipe", pipeline)
	ret0, _ := ret[0].(*mgo_v2.Pipe)
	return ret0
}

func (_mr *_MockCollectionRecorder) Pipe(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Pipe", arg0)
}
