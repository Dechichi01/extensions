// Automatically generated by MockGen. DO NOT EDIT!
// Source: redis/interfaces/redis.go

package mocks

import (
	redis "github.com/go-redis/redis"
	gomock "github.com/golang/mock/gomock"
	time "time"
)

// Mock of RedisClient interface
type MockRedisClient struct {
	ctrl     *gomock.Controller
	recorder *_MockRedisClientRecorder
}

// Recorder for MockRedisClient (not exported)
type _MockRedisClientRecorder struct {
	mock *MockRedisClient
}

func NewMockRedisClient(ctrl *gomock.Controller) *MockRedisClient {
	mock := &MockRedisClient{ctrl: ctrl}
	mock.recorder = &_MockRedisClientRecorder{mock}
	return mock
}

func (_m *MockRedisClient) EXPECT() *_MockRedisClientRecorder {
	return _m.recorder
}

func (_m *MockRedisClient) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockRedisClientRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockRedisClient) HGetAll(_param0 string) *redis.StringStringMapCmd {
	ret := _m.ctrl.Call(_m, "HGetAll", _param0)
	ret0, _ := ret[0].(*redis.StringStringMapCmd)
	return ret0
}

func (_mr *_MockRedisClientRecorder) HGetAll(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HGetAll", arg0)
}

func (_m *MockRedisClient) HMSet(_param0 string, _param1 map[string]interface{}) *redis.StatusCmd {
	ret := _m.ctrl.Call(_m, "HMSet", _param0, _param1)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

func (_mr *_MockRedisClientRecorder) HMSet(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HMSet", arg0, arg1)
}

func (_m *MockRedisClient) Ping() *redis.StatusCmd {
	ret := _m.ctrl.Call(_m, "Ping")
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

func (_mr *_MockRedisClientRecorder) Ping() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Ping")
}

func (_m *MockRedisClient) SetNX(key string, value interface{}, expiration time.Duration) *redis.BoolCmd {
	ret := _m.ctrl.Call(_m, "SetNX", key, value, expiration)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

func (_mr *_MockRedisClientRecorder) SetNX(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetNX", arg0, arg1, arg2)
}

func (_m *MockRedisClient) Eval(script string, keys []string, args ...interface{}) *redis.Cmd {
	_s := []interface{}{script, keys}
	for _, _x := range args {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Eval", _s...)
	ret0, _ := ret[0].(*redis.Cmd)
	return ret0
}

func (_mr *_MockRedisClientRecorder) Eval(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Eval", _s...)
}

func (_m *MockRedisClient) TxPipeline() redis.Pipeliner {
	ret := _m.ctrl.Call(_m, "TxPipeline")
	ret0, _ := ret[0].(redis.Pipeliner)
	return ret0
}

func (_mr *_MockRedisClientRecorder) TxPipeline() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TxPipeline")
}

func (_m *MockRedisClient) ZRangeByScore(key string, opt redis.ZRangeBy) *redis.StringSliceCmd {
	ret := _m.ctrl.Call(_m, "ZRangeByScore", key, opt)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

func (_mr *_MockRedisClientRecorder) ZRangeByScore(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ZRangeByScore", arg0, arg1)
}

func (_m *MockRedisClient) SPopN(key string, count int64) *redis.StringSliceCmd {
	ret := _m.ctrl.Call(_m, "SPopN", key, count)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

func (_mr *_MockRedisClientRecorder) SPopN(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SPopN", arg0, arg1)
}
